buildscript {
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies { classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT' }
}

apply plugin: 'forge'
apply plugin: 'maven-publish'
apply plugin: 'curseforge'

ext.buildnumber = 0
if (System.getenv('BUILD_NUMBER') != null)
    project.buildnumber = System.getenv('BUILD_NUMBER')
else
    logger.lifecycle "No build number detected, setting to 0"

group = "tterrag.colorblindhelper"
archivesBaseName = "ColorblindHelper"
version = "${minecraft_version}-${mod_version}.${buildnumber}"

if (!project.curse_type.equals('release'))
    version += "_${project.curse_type}"

minecraft {
    version = "${minecraft_version}-${forge_version}-${minecraft_version}"
    runDir = 'run'

    replace "@VERSION@", project.version
    replaceIn "ColorblindHelper.java"
}

configurations {
    compile.extendsFrom exportedCompile
}

repositories {
    maven { url = "http://chickenbones.net/maven/" }
    maven { url = "http://maven.tterrag.com" }
}

dependencies {
    compile "com.enderio.core:EnderCore:${minecraft_version}-${endercore_version}:dev"
    compile "codechicken:NotEnoughItems:${minecraft_version}-${NEI_version}:dev"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from { configurations.exportedCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'powercrystals/**'
    classifier = 'dev'
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

build.dependsOn sourceJar, deobfJar

curse {
    dependsOn 'reobf'
    
    onlyIf {
        return project.hasProperty('cp_curseforge_key') && System.getenv("CURSE") != null && System.getenv("CURSE").equalsIgnoreCase("true")
    }

    if (project.hasProperty('cp_curseforge_key')) apiKey = project.curseforge_key
    projectId = project.curse_projectId
    changelog = System.getenv("CHANGELOG").equals("none") ? getChangelogText() : System.getenv("CHANGELOG")
    releaseType = "${curse_type}".toString()
    additionalArtifact deobfJar, sourceJar
}
